'use strict';

var path = require('path'),
    appController = require(path.join(process.cwd(),'app/controller/application')),
    applicationController,
    appSettings,
    mongoose,
    Userrole,
    Userprivilege,
    Usergroup,
    logger;

var create = function(req, res, next) {
    if(req.controllerData.tag){
        applicationController.handleDocumentQueryRender({
            req:req,
            res:res,
            responseData:{
                result:"success",
                data:{
                    doc:req.controllerData.tag
                }
            }
        });
    }
    else{
        var newtag = applicationController.removeEmptyObjectValues(req.body);
        newtag.name = applicationController.makeNiceName(newtag.title);
        newtag.author = req.user._id;

        applicationController.createModel({
            model:Tag,
            newdoc:newtag,
            res:res,
            req:req,
            successredirect:'/p-admin/tag/edit/',
            appendid:true
        });
    }
};

var loadTags = function(req,res,next){
    var params = req.params,
        query,
        offset = req.query.offset,
        sort = req.query.sort,
        limit = req.query.limit,
        // population = 'tags collections authors primaryauthor',
        searchRegEx = new RegExp(applicationController.stripTags(req.query.search), "gi");

    req.controllerData = (req.controllerData)?req.controllerData:{};
    if(req.query.search===undefined || req.query.search.length<1){
        query={};
    }
    else{
        query = {
            $or: [{
                title: searchRegEx,
                }, {
                'name': searchRegEx,
            }]
        };
    }

    applicationController.searchModel({
        model:Tag,
        query:query,
        sort:sort,
        limit:limit,
        offset:offset,
        // population:population,
        callback:function(err,documents){
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                req.controllerData.tags = documents;
                next();
            }
        }
    });
};

var loadTag = function(req,res,next){
    var params = req.params,
        docid = params.id;
        console.log("docid",docid);

    req.controllerData = (req.controllerData)?req.controllerData:{};

    applicationController.loadModel({
        docid:docid,
        model:Tag,
        callback:function(err,doc){
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                req.controllerData.tag = doc;
                next();
            }
        }
    });
};


var searchResults = function(title,data,req,res,next){
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'search/index',
            themefileext:appSettings.templatefileextension
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata: {
                        title:title
                    },
                    uacdata:data,
                    user: applicationController.removePrivateInfo(req.user)
                }
            });
        }
    );
};

var userroleResults = function(req,res,next){
    searchResults("User Role Search Results",req.controllerData.userroles,req,res,next);
};

var userprivilegeResults = function(req,res,next){
    searchResults("User Privilege Search Results",req.controllerData.userprivileges,req,res,next);
};

var usergroupResults = function(req,res,next){
    searchResults("User Group Search Results",req.controllerData.usergroups,req,res,next);
};

var controller = function(resources){
    logger = resources.logger;
    mongoose = resources.mongoose;
    appSettings = resources.settings;
    applicationController = new appController(resources);
    Userrole = mongoose.model('Userrole');
    Userprivilege = mongoose.model('Userprivilege');
    Usergroup = mongoose.model('Usergroup');

    return{
        // createUserprivilege:createUserprivilege,
        // loadUserprivilege:loadUserprivilege,
        // loadUserprivileges:loadUserprivileges,
        // createUserrole:createUserrole,
        // loadUserrole:loadUserrole,
        // loadUserroles:loadUserroles,
        // createUsergroup:createUsergroup,
        // loadUsergroup:loadUsergroup,
        // loadUsergroups:loadUsergroups,
        userroleResults:userroleResults,
        userprivilegeResults:userprivilegeResults,
        usergroupResults:usergroupResults
    };
};

module.exports = controller;