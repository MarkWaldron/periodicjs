'use strict';

var path = require('path'),
    appController = require(path.join(process.cwd(),'app/controller/application')),
    applicationController,
    appSettings,
    mongoose,
    Userrole,
    Userprivilege,
    Usergroup,
    logger;

var createUACObject = function(req,res,next, reqcontrollerdatauacobject, model, redirectpath){
    if(reqcontrollerdatauacobject){
        applicationController.handleDocumentQueryRender({
            req:req,
            res:res,
            responseData:{
                result:"success",
                data:{
                    doc:reqcontrollerdatauacobject
                }
            }
        });
    }
    else{
        var newuacobject = applicationController.removeEmptyObjectValues(req.body);
        newuacobject.name = applicationController.makeNiceName(newuacobject.title);
        newuacobject.author = req.user._id;

        applicationController.createModel({
            model:model,
            newdoc:newuacobject,
            res:res,
            req:req,
            successredirect:redirectpath,
            appendid:true
        });
    }
};

var createUsergroup = function(req, res, next) {
    var reqcontrollerdataobj = (req.controllerData.usergroup)? req.controllerData.usergroup : null;
    createUACObject(req, res, next, reqcontrollerdataobj, Usergroup, '/p-admin/uac/usergroup/edit/');
};

var createUserrole = function(req, res, next) {
    var reqcontrollerdataobj = (req.controllerData.userrole)? req.controllerData.userrole : null;
    createUACObject(req, res, next, reqcontrollerdataobj, Userrole, '/p-admin/uac/userrole/edit/');
};

var createUserprivilege = function(req, res, next) {
    var reqcontrollerdataobj = (req.controllerData.userprivilege)? req.controllerData.userprivilege : null;
    createUACObject(req, res, next, reqcontrollerdataobj, Userprivilege, '/p-admin/uac/userprivilege/edit/');
};

var loadUacObject = function(req,res,next,population,model,objecttype){
    var params = req.params,
        docid = params.id;
        // console.log("docid",docid);

    req.controllerData = (req.controllerData)?req.controllerData:{};

    applicationController.loadModel({
        docid:docid,
        model:model,
        population:population,
        callback:function(err,doc){
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                switch(objecttype){
                    case 'usergroup':
                        req.controllerData.usergroup = doc;
                        next();
                        break;
                    case 'userrole':
                        req.controllerData.userrole = doc;
                        next();
                        break;
                    case 'userprivilege':
                        req.controllerData.userprivilege = doc;
                        next();
                        break;
                }
            }
        }
    });
};

var loadUsergroup = function(req,res,next){
    loadUacObject(req, res, next, 'roles', Usergroup, 'usergroup');
};

var loadUserrole = function(req,res,next){
    loadUacObject(req, res, next, 'privileges', Userrole, 'userrole');
};

var loadUserprivilege = function(req,res,next){
    loadUacObject(req, res, next, null, Userprivilege, 'userprivilege');
};

var loadUacObjects = function(req,res,next,population,model,objecttype){
    var params = req.params,
        query,
        offset = req.query.offset,
        sort = req.query.sort,
        limit = req.query.limit,
        searchRegEx = new RegExp(applicationController.stripTags(req.query.search), "gi");

    req.controllerData = (req.controllerData)?req.controllerData:{};
    if(req.query.search===undefined || req.query.search.length<1){
        query={};
    }
    else{
        query = {
            $or: [{
                title: searchRegEx,
                }, {
                'name': searchRegEx,
            }]
        };
    }

    applicationController.searchModel({
        model:model,
        query:query,
        sort:sort,
        limit:limit,
        offset:offset,
        population:population,
        callback:function(err,documents){
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                switch(objecttype){
                    case 'usergroup':
                        req.controllerData.usergroups = documents;
                        next();
                        break;
                    case 'userrole':
                        req.controllerData.userroles = documents;
                        next();
                        break;
                    case 'userprivilege':
                        req.controllerData.userprivileges = documents;
                        next();
                        break;
                }
            }
        }
    });
};

var loadUsergroups = function(req,res,next){
    loadUacObjects(req, res, next, 'roles', Usergroup, 'usergroup');
};

var loadUserroles = function(req,res,next){
    loadUacObjects(req, res, next, 'privileges', Userrole, 'userrole');
};

var loadUserprivileges = function(req,res,next){
    loadUacObjects(req, res, next, null, Userprivilege, 'userprivilege');
};

var searchResults = function(title,data,req,res){
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'search/index',
            themefileext:appSettings.templatefileextension
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata: {
                        title:title
                    },
                    uacdata:data,
                    user: applicationController.removePrivateInfo(req.user)
                }
            });
        }
    );
};

var userroleResults = function(req,res,next){
    searchResults("User Role Search Results",req.controllerData.userroles,req,res,next);
};

var userprivilegeResults = function(req,res,next){
    searchResults("User Privilege Search Results",req.controllerData.userprivileges,req,res,next);
};

var usergroupResults = function(req,res,next){
    searchResults("User Group Search Results",req.controllerData.usergroups,req,res,next);
};

var loadUacUsers = function(req,res,next){
    var params = req.params,
        query,
        offset = req.query.offset,
        sort = req.query.sort,
        limit = req.query.limit,
        population = 'extensionattributes userasset userroles',
        User = mongoose.model('User'),
        searchRegEx = new RegExp(applicationController.stripTags(req.query.search), "gi");

    req.controllerData = (req.controllerData)?req.controllerData:{};
    if(req.query.search===undefined || req.query.search.length<1){
        query={};
    }
    else{
        query = {
            $or: [{
                title: searchRegEx,
                }, {
                'name': searchRegEx,
            }]
        };
    }

    applicationController.searchModel({
        model:User,
        query:query,
        sort:sort,
        limit:limit,
        offset:offset,
        population:population,
        callback:function(err,documents){
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                req.controllerData.users = documents;
                next();
            }
        }
    });
};

var loadUserAccesControls = function(req,res,next){
    var params = req.params,
        query,
        offset = req.query.offset,
        sort = req.query.sort,
        limit = req.query.limit,
        population = 'privileges',
        searchRegEx = new RegExp(applicationController.stripTags(req.query.search), "gi");

    req.controllerData = (req.controllerData)?req.controllerData:{};
    if(req.query.search===undefined || req.query.search.length<1){
        query={};
    }
    else{
        query = {
            $or: [{
                title: searchRegEx,
                }, {
                'name': searchRegEx,
            }]
        };
    }

    applicationController.searchModel({
        model:Userrole,
        query:query,
        sort:sort,
        limit:limit,
        offset:offset,
        population:population,
        callback:function(err,documents){
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                req.controllerData.userroles = documents;
                next();
            }
        }
    });
};

var uacSearchResults = function(req,res,next,objecttype){
    var responseData ={};

    switch(objecttype){
        case 'usergroup':
            responseData = {
                pagedata: {
                    title: 'User Group Results'
                },
                usergroups: req.controllerData.usergroups,
                user: applicationController.removePrivateInfo(req.user)
            };
            break;
        case 'userrole':
            responseData = {
                pagedata: {
                    title: 'User Roles Results'
                },
                userroles: req.controllerData.userroles,
                user: applicationController.removePrivateInfo(req.user)
            };
            break;
        case 'userprivilege':
            responseData = {
                pagedata: {
                    title: 'User Roles Results'
                },
                userprivileges: req.controllerData.userprivileges,
                user: applicationController.removePrivateInfo(req.user)
            };
            break;
    }
    applicationController.getPluginViewDefaultTemplate({
            viewname: 'search/index',
            themefileext: appSettings.templatefileextension
        },
        function (err, templatepath) {
            applicationController.handleDocumentQueryRender({
                res: res,
                req: req,
                renderView: templatepath,
                responseData: responseData
            });
        }
    );
};

var userroleSearchResults = function(req,res,next){
    uacSearchResults(req,res,next,'userrole');
};

var userprivilegeSearchResults = function(req,res,next){
    uacSearchResults(req,res,next,'userprivilege');
};

var usergroupSearchResults = function(req,res,next){
    uacSearchResults(req,res,next,'usergroup');
};

var controller = function(resources){
    logger = resources.logger;
    mongoose = resources.mongoose;
    appSettings = resources.settings;
    applicationController = new appController(resources);
    Userrole = mongoose.model('Userrole');
    Userprivilege = mongoose.model('Userprivilege');
    Usergroup = mongoose.model('Usergroup');

    return{
        createUserprivilege:createUserprivilege,
        loadUserprivilege:loadUserprivilege,
        loadUserprivileges:loadUserprivileges,
        userprivilegeSearchResults:userprivilegeSearchResults,
        userprivilegeResults:userprivilegeResults,

        createUserrole:createUserrole,
        loadUserrole:loadUserrole,
        loadUserroles:loadUserroles,
        userroleSearchResults:userroleSearchResults,
        userroleResults:userroleResults,

        createUsergroup:createUsergroup,
        loadUsergroup:loadUsergroup,
        loadUsergroups:loadUsergroups,
        usergroupSearchResults:usergroupSearchResults,
        usergroupResults:usergroupResults,

        loadUacUsers:loadUacUsers,
        loadUserAccesControls:loadUserAccesControls
    };
};

module.exports = controller;