'use strict';

var path = require('path'),
	appController = require(path.join(process.cwd(),'app/controller/application')),
    extend = require('util-extend'),
    async = require('async'),
    fs = require('fs-extra'),
    moment = require('moment'),
    CronJob = require('cron').CronJob,
	applicationController,
	appSettings,
	mongoose,
    User,
    Collection,
    Item,//Item
    scheduled_itemid_array=[],
    scheduled_collectionid_array=[],
	logger;

var index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                err:err,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'admin',
                        extensions:applicationController.getAdminMenu()
                    },
                    items: recentitems,
                    user:req.user
                }
            });
        }
    );
};

var mail_index = function(req,res,next){
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/mailer/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Mail Settings',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/mailer.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    user:req.user
                }
            });
        }
    );
};

var items_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/items/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                err:err,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'item admin',
                        extensions:applicationController.getAdminMenu()
                    },
                    items: req.controllerData.items,
                    // privileges: req.controllerData.privileges,
                    user:req.user
                }
            });
        }
    );
};

var item_new = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/items/new',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            if(!err && !User.hasPrivilege(req.user,110)){
                err = new Error("You don't have access to view content");
            }
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'New Item',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/item.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    item:null,
                    serverdate:moment().format("YYYY-MM-DD"),
                    servertime:moment().format("HH:mm"),
                    user:req.user
                }
            });
        }
    );
};

var item_edit = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/items/edit',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:req.controllerData.item.title+' - Edit Item',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/item.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    item: req.controllerData.item,
                    serverdate:moment(req.controllerData.item.publishat).format("YYYY-MM-DD"),
                    servertime:moment(req.controllerData.item.publishat).format("HH:mm"),
                    user:req.user
                }
            });
        }
    );
};

var collections_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/collections/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Collections',
                        extensions:applicationController.getAdminMenu()
                    },
                    collections: req.controllerData.collections,
                    user:req.user
                }
            });
        }
    );
};

var collection_new = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/collections/new',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'New Collection',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/collection.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    collection:null,
                    serverdate:moment().format("YYYY-MM-DD"),
                    servertime:moment().format("HH:mm"),
                    user:req.user
                }
            });
        }
    );
};

var collection_edit = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/collections/edit',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:req.controllerData.collection.title+' - Edit Collection',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/collection.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    collection: req.controllerData.collection,
                    serverdate:moment(req.controllerData.collection.publishat).format("YYYY-MM-DD"),
                    servertime:moment(req.controllerData.collection.publishat).format("HH:mm"),
                    user:req.user
                }
            });
        }
    );
};

var assets_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/assets/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Assets',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/asset.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    assets: req.controllerData.assets,
                    user:req.user
                }
            });
        }
    );
};

var assets_show = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/assets/show',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:req.controllerData.asset.title+' - Edit Assets',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/assets.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    asset: req.controllerData.asset,
                    user:req.user
                }
            });
        }
    );
};

var contenttypes_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/contenttypes/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'content type admin',
                        extensions:applicationController.getAdminMenu()
                    },
                    contenttypes: req.controllerData.contenttypes,
                    user:req.user
                }
            });
        }
    );
};

var contenttype_show = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/contenttypes/show',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:req.controllerData.contenttype.title+' - Edit Content Types',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/contenttype.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    periodic:{
                        version: appSettings.version
                    },
                    contenttype: req.controllerData.contenttype,
                    user:req.user
                }
            });
        }
    );
};

var tags_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/tags/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'tag admin',
                        extensions:applicationController.getAdminMenu()
                    },
                    tags: req.controllerData.tags,
                    user:req.user
                }
            });
        }
    );
};

var tag_show = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/tags/show',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:req.controllerData.tag.title+' - Edit Tag',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/tag.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    periodic:{
                        version: appSettings.version
                    },
                    tag: req.controllerData.tag,
                    user:req.user
                }
            });
        }
    );
};

var categories_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/categories/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Category admin',
                        extensions:applicationController.getAdminMenu()
                    },
                    categories: req.controllerData.categories,
                    user:req.user
                }
            });
        }
    );
};

var category_show = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/categories/show',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:req.controllerData.category.title+' - Edit Tag',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/category.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    periodic:{
                        version: appSettings.version
                    },
                    category: req.controllerData.category,
                    user:req.user
                }
            });
        }
    );
};

var loadExtension = function(req, res, next){
    var extname = req.params.id,
        extFilePath = path.resolve(process.cwd(),'content/extensions/extensions.json'),
        z=false,
        selectedExt,
        currentExtensions;

    fs.readJson(extFilePath,function(err,currentExtensionsJson){
        // console.log("currentExtensionsJson",currentExtensionsJson);
        if(err){
            next(err);
        }
        else{
            currentExtensions = currentExtensionsJson.extensions;
            for (var x in currentExtensions){
                if(currentExtensions[x].name===extname){
                    z=x;
                }
            }

            if(z!==false){
                selectedExt = currentExtensions[z];
            }
            req.controllerData = (req.controllerData)?req.controllerData:{};
            req.controllerData.extension = selectedExt;
            req.controllerData.extensionx = z;
            next();
        }
    });
};

var loadExtensions = function(req, res, next){
    req.controllerData = (req.controllerData)?req.controllerData:{};

    applicationController.loadExtensions({
        periodicsettings:appSettings,
        callback:function (err,extensions) {
            if(err){
                applicationController.handleDocumentQueryErrorResponse({
                    err:err,
                    res:res,
                    req:req
                });
            }
            else{
                req.controllerData.extensions = extensions;
                next();
            }
        }
    })
};

var extensions_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/extensions/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Extensions',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/ext.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    items: false,
                    extensions: req.controllerData.extensions,
                    user:req.user
                }
            });
        }
    );
};

var extension_show = function(req, res, next){
    var extname = req.params.id,
        Extensions = require(path.join(process.cwd(),'app/lib/extensions')),
        extPackageConf = Extensions.getExtensionPackageJsonFilePath(extname),
        extPeriodicConf = Extensions.getExtensionPeriodicConfFilePath(extname);


    // an example using an object instead of an array
    async.parallel({
        packagefile: function(callback){
            fs.readJson(extPackageConf, callback);
        },
        periodicfile: function(callback){
            fs.readJson(extPeriodicConf, callback);
        }
    },
    function(err, results) {
        if(err){
            applicationController.handleDocumentQueryErrorResponse({
                err:err,
                res:res,
                req:req
            });
        }
        else{
            applicationController.getPluginViewDefaultTemplate(
                {
                    viewname:'p-admin/extensions/show',
                    themefileext:appSettings.templatefileextension,
                    extname: 'periodicjs.ext.admin'
                },
                function(err,templatepath){
                    applicationController.handleDocumentQueryRender({
                        res:res,
                        req:req,
                        renderView:templatepath,
                        responseData:{
                            pagedata:{
                                title:req.controllerData.extension.name+' - Extension',
                                // headerjs: ["/extensions/periodicjs.ext.admin/javascripts/extshow.js"],
                                extensions:applicationController.getAdminMenu()
                            },
                            extdata:results,
                            extension: req.controllerData.extension,
                            user:req.user
                        }
                    });
                }
            );
        }
    });
};

var loadThemes = function(req, res, next){
    var themedir = path.resolve(__dirname,'../../../../../content/themes/'),
    returnFiles =[];

    req.controllerData = (req.controllerData)?req.controllerData:{};

    fs.readdir(themedir,function(err,files){
        for(var x =0; x< files.length; x++){
            if(files[x].match('periodicjs.theme')){
                returnFiles.push(files[x]);
            }
        }
        if(err){
            applicationController.handleDocumentQueryErrorResponse({
                err:err,
                res:res,
                req:req
            });
        }
        else{
            req.controllerData.themes = returnFiles;
            next();
        }
    });
};

var themes_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/themes/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Themes',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/theme.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    items: false,
                    themes: req.controllerData.themes,
                    activetheme: appSettings.theme,
                    user:req.user
                }
            });
        }
    );
};
var theme_show = function(req, res, next){
    var themename = req.params.id,
        Themes = require(path.join(process.cwd(),'app/lib/themes')),
        themeRouteConf = Themes.getThemeRouteFilePath(themename),
        themePackageConf = Themes.getThemePeriodicConfFilePath(themename);

    // an example using an object instead of an array
    async.parallel({
        packagefile: function(callback){
            fs.readJson(themePackageConf, callback);
        },
        routefile: function(callback){
            fs.readFile(themeRouteConf,'utf8', callback);
        }
    },
    function(err, results) {
        if(err){
            console.log("async callback err",themename,err);
            applicationController.handleDocumentQueryErrorResponse({
                err:err,
                res:res,
                req:req
            });
        }
        else{
            applicationController.getPluginViewDefaultTemplate(
                {
                    viewname:'p-admin/themes/show',
                    themefileext:appSettings.templatefileextension,
                    extname: 'periodicjs.ext.admin'
                },
                function(err,templatepath){
                    applicationController.handleDocumentQueryRender({
                        res:res,
                        req:req,
                        renderView:templatepath,
                        responseData:{
                            pagedata:{
                                title:req.controllerData.theme.name+' - Theme',
                                // headerjs: ["/extensions/periodicjs.ext.admin/javascripts/theme.js"],
                                extensions:applicationController.getAdminMenu()
                            },
                            themedata:results,
                            theme: req.controllerData.theme,
                            user:req.user
                        }
                    });
                }
            );
        }
    });
};
var loadTheme = function(req, res, next){
    var selectedTheme = req.params.id;

    req.controllerData = req.controllerData || {};
    req.controllerData.theme = {
        name:selectedTheme,
        activetheme:appSettings.theme
    };
    if(selectedTheme){
        next();
    }
    else{
        next(new Error("no theme selected"));
    }
};

var users_index = function(req, res, next) {
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/users/index',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Manage Users',
                        extensions:applicationController.getAdminMenu()
                    },
                    users: req.controllerData.users,
                    user:req.user
                }
            });
        }
    );
};

var users_show = function(req, res, next){
    var allow_edit = false,
        params = req.params;

    if(params.id===req.user.username){
        logger.silly("users_show: logged in user matches username");
        allow_edit=true;
    }
    else if(req.user.usertype === 'admin'){
        logger.silly("users_show: user is admin");
        allow_edit=true;
    }
    else if(User.hasPrivilege(req.user,10)){
        logger.silly("users_show: has edit user privilege");
        allow_edit=true;
    }
    else{
        logger.silly("users_show: no access");
    }

    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/users/show',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Manage Users',
                        extensions:applicationController.getAdminMenu()
                    },
                    userprofile: req.controllerData.user,
                    allow_edit:allow_edit,
                    user:req.user
                }
            });
        }
    );
};

var users_access_role_new = function(req, res, next){
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/user-access/new_role',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'New User Role',
                        headerjs: ["/extensions/periodicjs.ext.admin/javascripts/uac.js"],
                        extensions:applicationController.getAdminMenu()
                    },
                    userrole:null, //req.controllerData.userrole
                    user:req.user
                }
            });
        }
    );
};

var loadUserRoles = function(req,res,next){
    var requserroles = {};
    req.controllerData = (req.controllerData)?req.controllerData:{};

    if(req.isAuthenticated()){
        User.populate(req.user,{path:"userroles.privileges",model:"Userprivilege"},function(err,populateduser){
            if(err){
                next(err);
            }
            else{
                req.user.privileges = {};
                for(var i = 0; i < populateduser.userroles.length; i++){
                    requserroles = populateduser.userroles[i];
                    for (var j = 0; j < requserroles.privileges.length; j++){
                        req.user.privileges[requserroles.privileges[j].userprivilegeid] = requserroles.privileges[j];
                    }
                }
                req.controllerData.userprivileges = req.user.privileges;
                // console.log("req.user.privileges",req.user.privileges);
                next();
            }
        });
    }
    else{
        next(); 
    }
};

var users_access = function(req, res, next){
    applicationController.getPluginViewDefaultTemplate(
        {
            viewname:'p-admin/users/edit-access',
            themefileext:appSettings.templatefileextension,
            extname: 'periodicjs.ext.admin'
        },
        function(err,templatepath){
            applicationController.handleDocumentQueryRender({
                res:res,
                req:req,
                renderView:templatepath,
                responseData:{
                    pagedata:{
                        title:'Manage Users Roles',
                        extensions:applicationController.getAdminMenu()
                    },
                    userroles: req.controllerData.userroles,
                    user:req.user
                }
            });
        }
    );
};

var check_user_access = function(req,res,next){
    var httpmethod = req.method,
        httpurl = path.resolve(req.originalUrl.toLowerCase());
        console.log(req.user.acounttype);
    // console.log(req.method,req.originalUrl);
    // http://stackoverflow.com/questions/6579308/javascript-inoperant-switch-case-with-a-regex
    // var testme = "pwd_foo", response;
    // var reg = /^pwd.+/;
    switch (true) {
        // case testme=='pwd':
        //     response = 'case1';
        //     break;
        // case reg.test(testme):
        //     response = 'case2';
        //     break;
        case httpurl==='/p-admin/items' || httpurl==='/p-admin/collections'  || httpurl==='/p-admin/contenttypes'  || httpurl==='/p-admin/tags'  || httpurl==='/p-admin/categories'   || httpurl==='/p-admin/assets' : 
            if(!User.hasPrivilege(req.user,110)){
                next(new Error("EXT-UAC110: You don't have access to view content"));
            }
            else{
                next();
            }
            break;
        case httpurl==='/p-admin/item/new' || httpurl==='/p-admin/collection/new' || httpurl==='/item/new' || httpurl==='/tag/new' || httpurl==='/collection/new' || httpurl==='/category/new' || httpurl==='/contenttype/new': 
            if(!User.hasPrivilege(req.user,110)){
                next(new Error("EXT-UAC110: You don't have access to create content"));
            }
            else if(!User.hasPrivilege(req.user,310)){
                next(new Error("EXT-UAC310: You don't have access to create content"));
            }
            else{
                next();
            }
            break;
        case httpurl==='/item/new':
            if(httpmethod==='POST' && !User.hasPrivilege(req.user,310)){
                next(new Error("EXT-UAC310: You don't have access to publish new content"));
            }
            else{
                next();
            }
            break;
        case (/p-admin\/item/gi.test(httpurl)) : 
            if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,710)){
                next(new Error("EXT-UAC710: You don't have access to modify content"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,710)){
                next(new Error("EXT-UAC710: You don't have access to delete content"));
            }
            else{
                next();
            }
            break;
        case (/p-admin\/collection/gi.test(httpurl)) : 
            if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,710)){
                next(new Error("EXT-UAC710: You don't have access to modify content"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,910)){
                next(new Error("EXT-UAC910: You don't have access to delete content"));
            }
            else{
                next();
            }
            break;
        case (/p-admin\/theme/gi.test(httpurl)) : 
            if(!User.hasPrivilege(req.user,120)){
                next(new Error("EXT-UAC120: You don't have access to view themes"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,320)){
                next(new Error("EXT-UAC320: You don't have access to install themes"));
            }
            else if(/enable/gi.test(httpurl) && !User.hasPrivilege(req.user,720)){
                next(new Error("EXT-UAC720: You don't have access to modify themes"));
            }
            else if(/delete/gi.test(httpurl) && !User.hasPrivilege(req.user,920)){
                next(new Error("EXT-UAC920: You don't have access to delete themes"));
            }
            else{
                next();
            }
            break;
        case (/p-admin\/extension/gi.test(httpurl)) : 
            if(!User.hasPrivilege(req.user,130)){
                next(new Error("EXT-UAC130: You don't have access to view extensions"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,330)){
                next(new Error("EXT-UAC330: You don't have access to install extensions"));
            }
            else if(/enable/gi.test(httpurl) && !User.hasPrivilege(req.user,730)){
                next(new Error("EXT-UAC730: You don't have access to modify extensions"));
            }
            else if(/disable/gi.test(httpurl) && !User.hasPrivilege(req.user,730)){
                next(new Error("EXT-UAC730: You don't have access to modify extensions"));
            }
            else if(/delete/gi.test(httpurl) && !User.hasPrivilege(req.user,930)){
                next(new Error("EXT-UAC920: You don't have access to delete extensions"));
            }
            else{
                next();
            }
            break;
        case (/p-admin\/setting/gi.test(httpurl)) : 
            if(!User.hasPrivilege(req.user,140)){
                next(new Error("EXT-UAC140: You don't have access to view settings"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,740)){
                next(new Error("EXT-UAC740: You don't have access to modify settings"));
            }
            else{
                next();
            }
            break;
        case httpurl==='/p-admin/users':
            if(!User.hasPrivilege(req.user,150)){
                next(new Error("EXT-UAC150: You don't have access to view users"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,350)){
                next(new Error("EXT-UAC350: You don't have access to add new users"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,750)){
                next(new Error("EXT-UAC750: You don't have access to modify users"));
            }
            else if(/delete/gi.test(httpurl) && !User.hasPrivilege(req.user,950)){
                next(new Error("EXT-UAC950: You don't have access to delete users"));
            }
            else{
                next();
            }
            break;
        case httpurl==='/p-admin/user/edit-access':
            if(!User.hasPrivilege(req.user,160)){
                next(new Error("EXT-UAC160: You don't have access to view users access"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,360)){
                next(new Error("EXT-UAC320: You don't have access to modify user access"));
            }
            else if(httpmethod.toLowerCase()==='post' && !User.hasPrivilege(req.user,760)){
                next(new Error("EXT-UAC750: You don't have access to modify user access"));
            }
            else if(/delete/gi.test(httpurl) && !User.hasPrivilege(req.user,960)){
                next(new Error("EXT-UAC960: You don't have access to delete user roles"));
            }
            else{
                next();
            }
            break;
        default:
            next();
            break;
    }
}

var controller = function(resources){
	logger = resources.logger;
	mongoose = resources.mongoose;
	appSettings = resources.settings;
	applicationController = new appController(resources);
    Item = mongoose.model('Item');
    Collection = mongoose.model('Collection');
    User  = mongoose.model('User');

	return{
		index:index,
        mail_index:mail_index,
        items_index:items_index,
        item_new:item_new,
        item_edit:item_edit,
        collections_index:collections_index,
        collection_new:collection_new,
        collection_edit:collection_edit,
        extensions_index:extensions_index,
        loadExtensions:loadExtensions,
        loadExtension:loadExtension,
        extension_show:extension_show,
        themes_index:themes_index,
        loadThemes:loadThemes,
        loadTheme:loadTheme,
        theme_show:theme_show,
        contenttypes_index:contenttypes_index,
        contenttype_show:contenttype_show,
        tags_index:tags_index,
        tag_show:tag_show,
        categories_index:categories_index,
        category_show:category_show,
        assets_index:assets_index,
        assets_show:assets_show,
        users_index:users_index,
        users_show:users_show,
        users_access_role_new:users_access_role_new,
        users_access:users_access,
        loadUserRoles:loadUserRoles,
        check_user_access:check_user_access
	};
};

module.exports = controller;