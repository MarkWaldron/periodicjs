'use strict';

var path = require('path'),
	passport = require('passport'),
	LocalStrategy = require('passport-local').Strategy,
	FacebookStrategy = require('passport-facebook').Strategy,
	appController = require(path.join(process.cwd(),'app/controller/application')),
	applicationController,
	appSettings,
	mongoose,
	User,
	logger;

var show = function(req,res,next){
	applicationController.getViewTemplate({
		res:res,
		req:req,
		id:req.controllerData.post.name,
		templatetype:'post-single',
		themepath:appSettings.themepath,
		themefileext:appSettings.templatefileextension,
		callback:function(templatepath){
			applicationController.handleDocumentQueryRender({
				res:res,
				req:req,
				renderView:templatepath,
				responseData:{
					post:req.controllerData.post,
					user:req.user
				}
			});
	}});
};

var create = function(req,res,next){
	/*
		// applicationController.loadModel({});
		// var newPost = new Post({title:"test title",name:"test-title"});

		// newPost.save(function(err){
		// 	console.log("trying to create new post");
		// 	if(err){
		// 		logger.error(err);
		// 		res.send(err);
		// 		console.log(err);
		// 	}
		// 	else{
		// 		logger.debug("post id: ",req.params.id);
		// 		logger.debug("showing new post");
		// 		res.render('home/index',{randomdata:'show post'});
		// 	}
		// });
		// 
	*/
};

var index = function(req,res,next){
	console.log('index list');
	Post.find({ title: /title/ }).exec(function(err,posts){
		console.log("model search");
		if(err){
			res.send(err);
		}
		else{
			res.send(posts);
		}
	});
};

var loadPost = function(req,res,next){
	var params = req.params,
		docid = params.id;

	req.controllerData = (req.controllerData)?req.controllerData:{};

	applicationController.loadModel({
		docid:docid,
		model:Post,
		callback:function(err,doc){
			if(err){
				applicationController.handleDocumentQueryErrorResponse({
					err:err,
					res:res,
					req:req
				});
			}
			else{
				req.controllerData.post = doc;
				next();
			}
		}
	});
};

var controller = function(resources){
	logger = resources.logger;
	mongoose = resources.mongoose;
	appSettings = resources.settings;
	applicationController = new appController(resources);
	User = mongoose.model('User');
	
	return{
		show:show,
		index:index,
		loadPost:loadPost
	};
};

module.exports = controller;

/*

exports.index = function(req, res, next) {
    if (req.user.accountType != "admin") {
        res.redirect('/home')
    } else {
        if (req.query.filter) {
            var searchRegEx = new RegExp(req.query.filter, "gi");
            var query = {
                $or: [{
                    username: searchRegEx,
                }, {
                    email: searchRegEx,
                }, {
                    firstname: searchRegEx,
                }, {
                    lastname: searchRegEx,
                }]
            };
        } else {
            var query = {};
        }
        var offset = (req.query.o) ? req.query.o : 0,
            limit = (req.query.l) ? req.query.l : 20;
        application_controller.searchModel(req, res, next, logger, User, query, '-username', offset, limit,
            function(documents) {
                res.send({
                    "result": "success",
                    "data": {
                        users: documents
                    }
                });
            }, function(documents) {
                this.flash_messages = req.flash();
                res.render('users/index', {
                    title: 'User page',
                    page: {
                        name: "user_admin"
                    },
                    users: documents
                });
            }, null, 'profileimage ');
    }
    // res.send("respond with a resource");
};
exports.new = function(req, res) {
    res.render('users/new', {
        page: {
            name: "register"
        },
        flash_messages: req.flash(),
        title: "Join Repetere"
    })
    // res.render('users/new',{title: title})
};
exports.create = function(req, res) {
    var bcrypt = require('bcrypt');
    var userdata = application_controller.remove_empty_object_values(req.body);
    logger.silly("controller - user.js - creating new user - ")
    logger.verbose(userdata);
    // console.log(userdata)
    if (
        userdata.password === undefined || !userdata.password || userdata.password === '' || userdata.password === ' ' || userdata.passwordconfirm == undefined || !userdata.passwordconfirm || userdata.passwordconfirm === '' || userdata.passwordconfirm === ' ') {
        delete userdata.password;
        delete userdata.passwordconfirm;
        req.flash('error', "missing password");
        logger.error("controller - user.js - missing password - trying to create");

        this.flash_messages = req.flash();
        this.user = req.user;
        res.render('users/new', {
            title: "Join Repetere",
            user: userdata,
            page: {
                name: "register"
            }
        });
    } else if (userdata.passwordconfirm != userdata.password) {
        delete userdata.password;
        delete userdata.passwordconfirm;
        req.flash('error', "confirmation password doesn't match");
        logger.error("controller - user.js - confirmation password doesn't match");

        this.flash_messages = req.flash();
        this.user = req.user;
        res.render('users/new', {
            user: userdata,
            page: {
                name: "register"
            }
        });
    } else if (userdata.email === undefined || !userdata.email || userdata.username === undefined || !userdata.username) {
        req.flash('error', "missing required data");
        logger.error("controller - user.js - missing required data");

        this.flash_messages = req.flash();
        this.user = req.user;
        res.render('users/new', {
            user: userdata,
            page: {
                name: "register"
            }
        });
    } else {
        var searchUsernameRegEx = new RegExp(userdata.username, "gi"),
            searchEmailRegEx = new RegExp(userdata.email, "gi");
        var query = {};

        if (userdata.username && userdata.email) {
            query = {
                $or: [{
                    username: searchUsernameRegEx
                }, {
                    email: searchEmailRegEx
                }]
            };
        } else if (userdata.username) {
            query = {
                username: searchUsernameRegEx
            };
        } else {
            query = {
                email: searchEmailRegEx
            };
        }


        // console.log("query",query)
        User.findOne(query,
            function(err, user) {
                // console.log("err",err,"user",user)
                if (err) {
                    logger.error(err);
                    // console.log("this is the error")
                    req.flash('error', err.toString())
                    this.user = req.user;

                    res.render('users/new', {
                        userToShow: userdata,
                        page: {
                            name: "register"
                        },
                        title: "Join Repetere",
                        flash_messages: req.flash(),
                    })
                } else if (user) {
                    logger.silly("controller - user.js - user already has an account");
                    req.flash('error', "you already have an account");

                    this.user = req.user;

                    res.render('users/new', {
                        showuser: userdata,
                        page: {
                            name: "register"
                        },
                        flash_messages: req.flash(),
                        title: "Join Repetere"
                    })
                } else {
                    delete userdata.passwordconfirm;
                    User.fastRegisterUser(userdata, function(err, returnedUser) {
                        if (err) {
                            logger.error(err);
                            // console.log(err)
                            req.flash('error', err.toString())
                            this.flash_messages = req.flash();
                            this.user = req.user;

                            res.render('users/new', {
                                user: userdata,
                                page: {
                                    name: "register"
                                },
                                title: "Join Repetere"

                            })
                        } else {
                            req.logIn(returnedUser, function(err) {
                                logger.verbose("controller - auth.js - got user")

                                if (err) {
                                    logger.error(err)
                                    return res.redirect('/login');
                                }

                                logger.silly("controller - auth.js - " + req.session.return_url)
                                if (req.session.return_url) {
                                    return res.redirect(req.session.return_url);
                                } else {
                                    return res.redirect('/');
                                }
                            });

                            User.sendAsyncWelcomeEmail(userdata, function() {});
                            var Progress = mongoose.model('Progress');
                            var logProgress = {
                                userid: returnedUser._id,
                                username: returnedUser.username,
                                title: returnedUser.username,
                                name: returnedUser.username,
                                type: "new user", //exercise, workout
                                model: "user", //exercise, workout
                                dataid: returnedUser,
                                data: {
                                    description: returnedUser.description
                                }
                            }
                            if (returnedUser.profileimages) {
                                logProgress.data.media = returnedUser.profileimages;
                            }
                            Progress.addProgress(logProgress, function(err) {
                                if (err) {
                                    logger.error(err)
                                } else {
                                    logger.verbose("new account created")
                                }
                            });
                        }
                    });
                }
            }
        );


    }


};
exports.update = function(req, res, next) {
    var user = this.showuser;
    logger.silly("req.body", req.body)
    application_controller.updateModel(User, req, res, next, user, 'user', logger);
};
exports.login = function(req, res) {
    this.flash_messages = req.flash();
    res.render('users/login', {
        title: 'Login',
        page: {
            name: "login"
        },
        user: req.user
    });
}
exports.editUser = function(req, res, next) {
    this.title = "update your profile";
    this.user = req.user;
    this.flash_messages = req.flash();
    logger.silly("controller - user.js - editing profile");
    res.render("users/edit", {
        page: {
            name: "edit_profile"
        }
    })
}
exports.edit = function(req, res) {
    var userToUpdate = req.user;
    this.title = "update your profile";
    this.user = req.user;
    this.flash_messages = req.flash();
    logger.silly("controller - user.js - editing profile");

    var userdata = application_controller.remove_empty_object_values(req.body);
    if (Object.keys(userdata.profile).length == 0) {
        delete userdata.profile;
    }
    logger.verbose(JSON.stringify(userdata))
    User.findOneAndUpdate({
        _id: userToUpdate._id
    }, userdata, {
        multi: false
    }, function(err, doc) {
        // logger.verbose(JSON.stringify(userToUpdate));
        // logger.verbose('user.update just watch')
        // logger.verbose(JSON.stringify(doc));
        if (err) {
            logger.error(err);
            logger.error("controller - user.js - could not update user");
            req.flash('error', err.toString());
            req.render("users/edit", {
                page: {
                    name: "edit_profile"
                }
            })
        } else {
            req.flash('info', "user account updated username only");
            res.render("users/edit", {
                showuser: doc,
                page: {
                    name: "edit_profile"
                }
            })

        }

    });
}
exports.show = function(req, res, next) {
    returnData = this.data;
    // console.log(returnData)
    returnData.forEach(function(rdata) {
        // console.log(rdata)
        if (rdata && rdata.resulttype == "userdata") {
            this.showuser = rdata.result;
        }
        if (rdata && rdata.resulttype == "followingdata") {
            this.showuserfollowing = rdata.result;
            this.showuserfollowing.forEach(function(following) {
                // console.log("this.showuser._id",this.showuser._id,"following.followinguserid",following.followinguserid)
                if (this.showuser._id.toString() == following.followinguserid.toString()) {
                    this.isFollowing = true;
                }
            })
        } else {
            this.isFollowing = false;
        }
    })

    logger.verbose("controller - user.js - showing user")
    var jsondata = {
        "result": "success",
        "data": {
            user: this.showuser
        }
    },
        pagedata = {
            page: {
                name: "userprofile"
            },
            title: this.showuser.username + "'s profile",
            flash_messages: req.flash()
        };
    application_controller.showModel(req, res, next, logger, this.showuser.username + "'s profile", "user", this.showuser, pagedata, jsondata, 'users/show');
};
exports.delete = function(req, res, next) {
    var currentUser = this.showuser;
    // var exercise = this.exercise;
    application_controller.require_admin_user_access(req, res, next, req.user._id, req.user.accountType, currentUser._id, function() {
        application_controller.deleteModel(User, req, res, next, currentUser, 'user', logger);

        Progress.removeProgress({
            userid: req.user._id,
            model: "user",
            dataid: currentUser._id
        }, function(err, data) {
            if (err) {
                logger.error(err)
            } else {
                logger.verbose("deleted progress activity")
                // logger.verbose(data)
            }
        });
    });
};
exports.updateregistration = function(req, res, next) {
    this.title = "complete registration";
    this.flash_messages = req.flash();
    this.user = req.user;

    res.render('users/finishregistration', {
        page: {
            name: "register"
        }
    })
    // res.render('users/new',{title: title})
};
exports.updateuserregistration = function(req, res, next) {
    this.title = "complete registration";
    this.flash_messages = req.flash();
    this.user = req.user;


    User.findOne({
        email: req.user.email
    }, function(err, userToUpdate) {
        if (err) {
            logger.error(err);
            req.flash('error', err.toString());
            this.flash_messages = req.flash();
            res.render('users/finishregistration', {
                page: {
                    name: "register"
                }
            });
        } else if (!userToUpdate) {
            logger.error("controller - user.js - could not find user");
            req.flash('error', "couldn't complate registration");
            this.flash_messages = req.flash();
            res.render('users/finishregistration', {
                page: {
                    name: "register"
                }
            });
        } else {
            userToUpdate.username = req.body.username;
            userToUpdate.save(function(err, userSaved) {
                if (err) {
                    logger.error(err);
                    logger.error("controller - user.js - could not update user");
                    req.flash('error', err.toString());
                    this.flash_messages = req.flash();
                    res.render('users/finishregistration', {
                        page: {
                            name: "register"
                        }
                    });
                } else {
                    forwardUrl = (req.session.return_url) ? req.session.return_url : '/';
                    req.flash('info', "updated user account");
                    this.flash_messages = req.flash();
                    res.redirect(forwardUrl);

                    User.sendAsyncWelcomeEmail(userSaved, function() {});
                    var Progress = mongoose.model('Progress');
                    var logProgress = {
                        userid: userSaved._id,
                        username: userSaved.username,
                        title: userSaved.username,
                        name: userSaved.username,
                        type: "new user", //exercise, workout
                        model: "user", //exercise, workout
                        dataid: userSaved._id,
                        data: {
                            description: userSaved.description
                        }
                    }
                    console.log("logProgress", logProgress)
                    if (user.profileimages) {
                        logProgress.data.media = userSaved.profileimages;
                    }
                    Progress.addProgress(logProgress, function(err) {
                        if (err) {
                            logger.error(err)
                        } else {
                            logger.verbose("new account created")
                        }
                    });

                }
            })
        }


    })

    // res.render('users/new',{title: title})
};

exports.updateFastRegistration = function(req, res, next) {
    var userToUpdate = application_controller.remove_empty_object_values(req.body);
    var userid = userToUpdate._id;
    var userapikey = userToUpdate.apikey;
    if (userToUpdate.username) {
        userToUpdate.username = application_controller.make_user_name_nice(userToUpdate.username);
    }

    if (userToUpdate.profile && Object.keys(userToUpdate.profile).length == 0) {
        delete userToUpdate.profile;
    }
    delete userToUpdate._csrf;
    if (userToUpdate._id) {
        delete userToUpdate._id;
    }
    if (userToUpdate.apikey) {
        delete userToUpdate.apikey;
    }

    User.findOneAndUpdate({
        "_id": userid,
        "apikey": userapikey
    }, userToUpdate, function(err, user) {
        // console.log(user)
        if (err) {
            logger.error(err);
            res.send({
                "result": "error",
                "data": err
            });
        } else if (user) {
            if (req.query.newuser) {
                User.sendAsyncWelcomeEmail(user, function() {});
                var Progress = mongoose.model('Progress');
                var logProgress = {
                    userid: user._id,
                    username: user.username,
                    title: user.username,
                    name: user.username,
                    type: "new user", //exercise, workout
                    model: "user", //exercise, workout
                    dataid: user,
                    data: {
                        description: user.description
                    }
                }
                if (user.profileimages) {
                    logProgress.data.media = user.profileimages;
                }
                Progress.addProgress(logProgress, function(err) {
                    if (err) {
                        logger.error(err)
                    } else {
                        logger.verbose("new account created")
                    }
                });
            }

            var returnToUser = user;
            if (returnToUser.password) {
                returnToUser.password = null;
                delete returnToUser.password;
            }
            res.send({
                "result": "success",
                "data": {
                    user: returnToUser
                }
            });
        } else {
            res.send({
                "result": "error",
                "data": "invalid user request"
            });
        }
    })
}
exports.showFollowers = function(req, res, next) {
    logger.verbose("controller - user.js - getting user followers")
    var sendShowUser = this.showuser;

    UserRelationship.getUserFollowers({
        user: this.showuser
    }, function(err, followers) {
        if (err) {
            application_controller.genericModelCallbackHelperError({
                req: req,
                res: res,
                err: err,
                modelname: "userRelationship",
                logger: logger,
                errorFlash: "invalid follower query"
            });
        } else {
            // console.log(followers)
            if (req.query.format == "json" || req.xhr) {
                res.send({
                    "result": "success",
                    "data": {
                        showuser: sendShowUser,
                        followers: followers
                    }
                });
            } else {
                res.render('users/show/followers', {
                    page: {
                        name: "users"
                    },
                    showuser: sendShowUser,
                    title: sendShowUser.username + "'s followers",
                    followers: followers,
                    flash_messages: req.flash()
                });
            }
        }
    });
};
exports.showFollowing = function(req, res, next) {
    var sendShowUser = this.showuser;
    UserRelationship.getUserFollowing({
        user: this.showuser
    }, function(err, following) {
        if (err) {
            application_controller.genericModelCallbackHelperError({
                req: req,
                res: res,
                err: err,
                modelname: "userRelationship",
                logger: logger,
                errorFlash: "invalid following query"
            });
        } else {
            // console.log(following)
            if (req.query.format == "json" || req.xhr) {
                res.send({
                    "result": "success",
                    "data": {
                        showuser: sendShowUser,
                        following: following
                    }
                });
            } else {
                res.render('users/show/following', {
                    page: {
                        name: "users"
                    },
                    showuser: sendShowUser,
                    title: "Who " + sendShowUser.username + " follows",
                    following: following,
                    flash_messages: req.flash()
                });
            }
        }
    });
};
exports.showWorkouts = function(req, res, next) {
    var sendShowUser = this.showuser;
    Workout.getUserWorkouts({
        user: this.showuser
    }, function(err, workouts) {
        if (err) {
            application_controller.genericModelCallbackHelperError({
                req: req,
                res: res,
                err: err,
                modelname: "workout",
                logger: logger,
                errorFlash: "invalid workout query"
            });
        } else {
            // console.log(workouts)
            if (req.query.format == "json" || req.xhr) {
                res.send({
                    "result": "success",
                    "data": {
                        showuser: sendShowUser,
                        workouts: workouts
                    }
                });
            } else {
                res.render('users/show/workouts', {
                    page: {
                        name: "users"
                    },
                    showuser: sendShowUser,
                    title: sendShowUser.username + "'s workouts",
                    workouts: workouts,
                    flash_messages: req.flash()
                });
            }
        }
    });
};
exports.showProgress = function(req, res, next) {
    logger.verbose("controller - user.js - getting user progress");
    var showFriends = req.query.showFriendActivity,
        offset = (req.query.o) ? req.query.o : 0,
        limit = (req.query.l) ? req.query.l : 20,
        originalQuery = req.query.query;

    console.log("showFriends", showFriends)
    if (showFriends == "true") {
        console.log("lookging for relationships")
        userRelationship = mongoose.model('userRelationship');
        query = {
            userid: req.user._id
        }
        userRelationship.find(query, function(err, following) {
            if (err) {
                application_controller.genericModelCallbackHelperError({
                    modelname: 'userWorkout',
                    req: req,
                    res: res,
                    logger: logger,
                    err: err
                });
            } else {
                // console.log("following",following)
                var followingUserIdArray = new Array();
                if (following && following.length > 0) {
                    following.forEach(function(followdata) {
                        followingUserIdArray.push(followdata.followinguserid)
                    });
                }

                // console.log("followingUserIdArray",followingUserIdArray)
                var query = {
                    $or: [{
                        userid: req.user._id
                    }, {
                        userid: {
                            $in: followingUserIdArray
                        }
                    }]
                }
                // console.log("query",query)

                application_controller.searchModel(req, res, next, logger, Progress, query, '-createdat', offset, limit, function(documents) {
                    res.send({
                        "result": "success",
                        "data": {
                            progress: documents
                        }
                    });
                }, function(documents) {
                    // console.log(documents)
                    res.render('search/progressresults', {
                        title: 'Search Results',
                        flash_messages: req.flash(),
                        page: {
                            name: "Search Results"
                        },
                        progress: documents,
                        originalQuery: originalQuery
                    });
                }, function(documents) {
                    res.redirect('/404')
                }, 'data.media');
            }
        })
    } else {
        var query = {
            userid: req.user._id
        };

        application_controller.searchModel(req, res, next, logger, Progress, query, '-createdat', offset, limit, function(documents) {
            res.send({
                "result": "success",
                "data": {
                    progress: documents
                }
            });
        }, function(documents) {
            // console.log(documents)
            res.render('search/progressresults', {
                title: 'Search Results',
                flash_messages: req.flash(),
                page: {
                    name: "Search Results"
                },
                progress: documents,
                originalQuery: originalQuery
            });
        }, function(documents) {
            res.redirect('/404')
        }, 'data.media');

    }
};
exports.search = function(req, res) {
    // var pattern = //i
    var searchRegEx = new RegExp("^" + application_controller.strip_tags(req.params.searchQuery), "i");

    logger.verbose("controller - exercise.js - searching for an exercise");
    logger.verbose(searchRegEx);
    User.find({
        $or: [{
            title: searchRegEx
        }, {
            description: searchRegEx
        }]
    }, function(err, users) {
        if (err) {
            // logger.info("controller - exercise.js - no exercises")
            logger.error(err);
            req.flash('error', err.toString());
            res.send({
                "result": "error",
                "data": {
                    error: err
                }
            });
        } else {
            logger.silly("controller - exercise.js - got exercises")
            res.send({
                "result": "success",
                "data": {
                    users: users
                }
            });
        }
    });
};




exports.followUser = function(req, res, next) {
    var userToFollowId = req.params.followuserid;
    var user = req.user;
    var userAboutToFollow = false;
    application_controller.loadModel(req, res, next, logger, "user", User, userToFollowId,
        function(err, userToFollow) {
            if (err) {
                application_controller.loadModelCallbackHelperError('user', req, res, logger);
            } else if (userToFollow) {
                userAboutToFollow = userToFollow;
                userRelationship = mongoose.model('userRelationship');
                userRelationship.createRelationship({
                    user: user,
                    following: userToFollow
                }, function(err, followed) {
                    if (err) {
                        application_controller.genericModelCallbackHelperError({
                            modelname: 'user',
                            req: req,
                            res: res,
                            logger: logger,
                            err: err
                        });
                    } else {
                        res.send({
                            "result": "success",
                            "data": followed
                        });

                        User.sendAsyncFollowEmail({
                            user: userAboutToFollow,
                            follower: user
                        });
                        User.incFollowingCount({
                            user: user
                        }, function(err) {
                            if (err) {
                                logger.error(err);
                            } else {
                                logger.verbose("updated following count")
                            }
                        })
                        User.incFollowerCount({
                            user: userToFollow
                        }, function(err) {
                            if (err) {
                                logger.error(err);
                            } else {
                                logger.verbose("updated follower count")
                            }
                        })

                        var logProgress = {
                            userid: user._id,
                            username: user.username,
                            type: "new follower", //exercise, workout
                            model: "follower", //exercise, workout
                            dataid: userAboutToFollow._id,
                            title: userAboutToFollow.username,
                            name: userAboutToFollow.username,
                            data: {}
                        }
                        Progress.addProgress(logProgress, function() {});

                    }
                })

            } else {
                application_controller.loadModelCallbackHelperInvalid('user', req, res, logger);
            }
        });
}
exports.unFollowUser = function(req, res, next) {
    var userToUnFollowId = req.params.followuserid;
    var user = req.user;
    application_controller.loadModel(req, res, next, logger, "user", User, userToUnFollowId,
        function(err, userToUnFollow) {
            if (err) {
                application_controller.loadModelCallbackHelperError('user', req, res, logger);
            } else if (userToUnFollow) {

                relationshipDataToRemove = {
                    user: user,
                    following: userToUnFollow,
                }

                userRelationship = mongoose.model('userRelationship');
                userRelationship.removeRelationship(relationshipDataToRemove, function(err) {
                    if (err) {
                        application_controller.genericModelCallbackHelperError({
                            modelname: 'user',
                            req: req,
                            res: res,
                            logger: logger,
                            err: err
                        });
                    } else {
                        application_controller.genericModelCallbackHelperSuccess({
                            modelname: 'user',
                            req: req,
                            res: res,
                            logger: logger,
                            returnData: {
                                msg: "no longer following"
                            }
                        });
                    }
                });
                User.decFollowingCount({
                    user: user
                }, function(err) {
                    if (err) {
                        logger.error(err);
                    } else {
                        logger.verbose("decreased following count")
                    }
                })

                User.decFollowerCount({
                    user: userToUnFollow
                }, function(err) {
                    if (err) {
                        logger.error(err);
                    } else {
                        logger.verbose("decreased follower count")
                    }
                });
                Progress.removeProgress({
                    userid: req.user._id,
                    model: "follower",
                    dataid: userToUnFollow._id
                }, function(err, data) {
                    if (err) {
                        logger.error(err)
                    } else {
                        logger.verbose("deleted progress activity")
                        logger.verbose(data)
                    }
                });

            } else {
                application_controller.loadModelCallbackHelperInvalid('user', req, res, logger);
            }
        });
}

exports.loadFullUser = function(req, res, next) {
    var params = req.params;
    var userid = (!params.userid) ? req.user._id.toString() : params.userid;
    var self = this;

    async.parallel([
            function(callback) {
                application_controller.loadModelWithPopulation(req, res, next, logger, 'user', User, userid, 'coverimage profileimage',
                    function(err, doc) {
                        if (err) {
                            callback(err, null)
                        } else if (doc) {
                            callback(err, {
                                resulttype: "userdata",
                                result: doc
                            })
                        } else {
                            callback("unknow user request error", null, null)
                        }
                    }.bind(this));
            },
            function(callback) {
                if (req.isAuthenticated()) {
                    userRelationship = mongoose.model('userRelationship');
                    query = {
                        username: req.user.username
                    }
                    application_controller.loadQuery({
                        model: userRelationship,
                        query: query,
                        callback: function(err, doc) {
                            if (err) {
                                callback(err, null)
                            } else if (doc) {
                                // console.log("got following data!!!")
                                callback(err, {
                                    resulttype: "followingdata",
                                    result: doc
                                })
                            } else {
                                callback("unknow user request error", null)
                            }
                        }
                    });

                } else {
                    callback(null, null)
                }


            },
        ],
        function(err, data) {
            // console.log("data",data,"err",err)

            // console.log(result.length)
            if (err) {
                application_controller.genericModelCallbackHelperError({
                    modelname: 'user',
                    req: req,
                    res: res,
                    logger: logger,
                    err: err
                });
            } else {
                self.data = data;
                next();
            }
            // if(result=="done"){
            // }
        });
}
exports.loadUser = function(req, res, next) {
    var params = req.params;
    var userid = (!params.userid) ? req.user._id.toString() : params.userid;
    application_controller.loadModelWithPopulation(req, res, next, logger, 'user', User, userid, 'coverimage profileimage',
        function(err, doc) {
            if (err) {
                application_controller.loadModelCallbackHelperError('user', req, res, logger);
            } else if (doc) {
                this.showuser = doc;
                next();
            } else {
                application_controller.loadModelCallbackHelperInvalid('user', req, res, logger);
            }
        }.bind(this));
}
exports.ensureAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
        if (!req.user.username) {
            res.redirect('/user/finishregistration')
        } else {
            return next();
        }
    } else {
        if (req.query.format == "json" || req.xhr) {
            res.send({
                "result": "error",
                "data": {
                    error: "authentication requires "
                }
            });
        } else {
            if (req.url) {
                logger.verbose("controller - user.js - " + req.url)
                req.session.return_url = req.url;
                res.redirect('/login?return_url=' + req.url);
            } else {
                res.redirect('/login');
            }

        }
    }
}
exports.apiAuthenticated = function(req, res, next) {
    // console.log(req.body)
    if (req.body.apikey && req.body.userid) {
        return next();
    } else {
        return next(new Error("invalid api request"));
    }
}
 */